import { IRedisConfig } from "../interfaces/redis-config.interface";
import { RedisClient as _RedisClient } from "redis";
import { Observable } from "rxjs/index";
import { IRedisProvider } from "../interfaces/redis-provider.interface";
import { RedisConnectionTypes } from "../constants/redis-connection-types.constants";
import { PubSubMessage } from "../classes/pub-sub-message.class";
import { ScriptResource } from "../classes/script-resource.class";
import { IRedisClientPromise } from "../interfaces/redis-client-promise.interface";
export declare type TRedisProvider = RedisProvider & _RedisClient & IRedisClientPromise;
export declare type TRedisClient = _RedisClient;
export declare class RedisProvider implements IRedisProvider {
    private static _RedisClient;
    private static DEFAULT_CONNECTION_NAME;
    private static DEFAULT_CONNECTION;
    private static ConnectionsCounter;
    static Connections: Map<string, TRedisProvider>;
    static RedisClient: any;
    private _config;
    private _connectionName;
    private _id;
    private _client;
    private _scriptLoader;
    readonly connectionName: string;
    readonly client: TRedisClient;
    protected constructor(config: IRedisConfig, connectionName: string, connectionType: RedisConnectionTypes);
    getRedisClient(): _RedisClient;
    quit(): Promise<boolean>;
    runAsyncMethod<Response = any>(method: (...args: any[]) => any, ...args: any[]): Promise<Response>;
    publish(channel: string, value: string): Promise<number>;
    getSubscriber<DataType>(byPattern: false, channel: string): Observable<PubSubMessage<DataType>>;
    getSubscriber<DataType>(byPattern: true, pattern: string): Observable<PubSubMessage<DataType>>;
    unsubscribe(byPattern: false, ...channels: string[]): Promise<string>;
    unsubscribe(byPattern: true, ...patterns: string[]): Promise<string>;
    runScripts(...scripts: Array<ScriptResource>): Promise<any>;
    loadScripts(...scripts: Array<ScriptResource>): void;
    execScripts(): Promise<any>;
    private initClient;
    private setDecoratorListeners;
    private setDecoratorListener;
    private onChannelClose;
    private getSubscriberClient;
    private getPublishClient;
    static CreateConnection(connectionConfig: IRedisConfig): TRedisProvider;
    static CreateConnection(connectionConfig: IRedisConfig, connectionName: string): TRedisProvider;
    static CreateConnection(connectionConfig: IRedisConfig, connectionName: string, connectionType: RedisConnectionTypes): TRedisProvider;
    static GetConnection(): any;
    static GetConnection(connectionName: string): any;
    static GetConnection(connectionName: string, connectionType: RedisConnectionTypes): any;
    static QuitAll(): Promise<boolean>[];
    protected static getConnectionName(connectionName: string, connectionType: RedisConnectionTypes): string;
}
